#!/usr/bin/env bash

usage="verify-unity-version - verifies unity version for all exercises in a given directory
Usage:
  verify-unity-version <path-to-exercises>

Example:
  verify-unity-version ./exercises/concept ./exercises/practice"

declare -r expected_version_major=2
declare -r expected_version_minor=5
declare -r expected_version_build=2

set -e

# Move to the root directory of the repo so you can run this script from anywhere
SCRIPT_DIR="$( cd "$( dirname "$0" )" >/dev/null 2>&1 && pwd )"
cd "${SCRIPT_DIR}"/..

set +e

extract_version_part() {
    file="$1"
    part_name="$2"
    version=$(grep "#define\\s\\+$part_name" "$file" | awk '{ print $3 }')
    echo "$version"
}

test_unity_version() {
    file="$1"
    [[  "$(extract_version_part "$file" UNITY_VERSION_MAJOR)" = "$expected_version_major"
    && "$(extract_version_part "$file" UNITY_VERSION_MINOR)" = "$expected_version_minor"
    && "$(extract_version_part "$file" UNITY_VERSION_BUILD)" = "$expected_version_build" ]]
}

ERROR_COUNT=0

check_exercises () {
    for f in "${1}"/*/test-framework/unity.h; do
        if [ -f "${f}" ]
        then
            if ! test_unity_version "$f"; then
                echo "$f unexpected unity version"
                (( ERROR_COUNT++ ))
            fi
        else
            echo "ERROR: file not found: ${1}"
            exit 1
        fi
    done
}

if [ $# -gt 0 ]
then
    echo "Expecting Unity version ${expected_version_major}.${expected_version_minor}.${expected_version_build}"
    for directory
    do
        if [ -d "${directory}" ]
        then
            check_exercises "${directory}"
        else
            echo "WARNING: Directory not found. Ignoring: ${1}"
        fi
    done

    exit "${ERROR_COUNT}"
else
    echo "${usage}"
    echo ""
    exit 1
fi
